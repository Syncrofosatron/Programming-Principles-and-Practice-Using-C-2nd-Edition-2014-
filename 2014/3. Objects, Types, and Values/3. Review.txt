1. What is meant by the term prompt?
2. Which operator do you use to read into a variable?
3. If you want the user to input an integer value into your program for a variable named number, what are two lines of
code you could write to ask the user to do it and to input the value into your program?
4. What is \n called and what purpose does it serve?
5. What terminates input into a string?
6. What terminates input into an integer?
7. How would you write
cout << "Hello, ";
cout << first_name;
cout << "!\n";
as a single line of code?
8. What is an object?
9. What is a literal?
10. What kinds of literals are there?
11. What is a variable?
12. What are typical sizes for a char, an int, and a double?
13. What measures do we use for the size of small entities in memory, such as ints and strings?
14. What is the difference between = and ==?
15. What is a definition?
16. What is an initialization and how does it differ from an assignment?
17. What is string concatenation and how do you make it work in C++?
18. Which of the following are legal names in C++? If a name is not legal, why not?
	This_little_pig This_1_is fine 2_For_1_special
	latest thing the_$12_method _this_is_ok
	MiniMineMine number correct?
19. Give five examples of legal names that you shouldnâ€™t use because they are likely to cause confusion.
20. What are some good rules for choosing names?
21. What is type safety and why is it important?
22. Why can conversion from double to int be a bad thing?
23. Define a rule to help decide if a conversion from one type to another is safe or unsafe.

1. Prompt is something when we ask a user to input something in a program.

2. Stream insertion operator is used, ">>".

3. cout << "Enter an integer value: ";
    cin >> number;

4. "\n" means newline. anything following it gets transferred to a newline.

5. White spaces (space, tabs or newline) terminates input into a string.

6. Using a non-integer.

7. cout << "Hello " << first_name << "\n";

8. An object is a named location in a memory. -DDDDD It is like a placeholder, it stores in memory value of a given type.

9. Literal is the smallest executable unit in a program. -DDDDD Literal represents values of various types. It could be string, char, int and such.

10. There are int, float, char, double, bool type literals.

11. A variable is a named location in a memory. It's value can be changed, when it happens, the previous value is overwritten.

12. char: 1 byte, int: 4 bytes, double: 8 bytes.

13. We use bytes to measure the size of entities in memory.

14. "=" is assignment operator whereas "==" is comparison operator.

15. Definition is when we allocate a variable and initialize it with some value. -DDDDD Definition is the process of having a memory allocated when we do a declaration. (Declaration is the naming of an object).

17. String concatenation is the process of adding 2 separate strings into a single unit. In C++, it can be done using "+" operator.

18. 2_For_1_special: Starting with a digit.
      latest thing: Space is not allowed.
      the_$12: $ character is not allowed.

19. int, float, char, string, friend.

20. Use underscore where space is needed, keep away from using underscore in the beginning as there might be some already made functions with the same name.

21. Type safety refers to the rule of safe conversion when type casting. As there is a possibility of losing data when we typecast higher memory literal with lower memory literal.

22. As double is 8 bytes and int is 4 bytes, this is prone to data loss.

23. If we are type casting from lower to higher sized memory, we are good to go.